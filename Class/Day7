// 24.04.19 Day7
// SGA C++ unreal class
// visual studio 2022

// 기초 복습 및 함수 구현
// 0413.cpp, main.h 분리하여 사용
// 0413.cpp
#include "main.h"

extern int number; // 다른 파일에서 선언된 num을 사용하겠다.

int num; // 전역 변수

int main()
{   
  // x, y 값 서로 변경하기
	int x = 10, y = 20; // 지역 변수
	int temp;
	int* px = &x;
	int* py = &y;

	h_swap(x, y); // 하드코딩 swap
	p_swap(x, y); // pointer를 사용하여 swap
  // 하드코딩 방법으로는 h_swap 이후 x, y 값의 변경이 없다.
  // 포인터를 이용한 방법으로는 p_swap 이후 x, y 값의 변경이 있다.
  // h_swap의 작동시의 a, b의 값은 다른 주소에 저장이 된다.
  // 하지만 포인터를 사용한 p_swap의 경우에는 a, b의 값이 x, y의 주소 값을 사용한다.
  // 그렇기에 p_swap을 사용 시 x, y 주소 값의 저장된 값을 변경하여 나오기 때문에 x, y의 값이 변경되어 나온다.

	return 0;
}
// ===================================================== main.h ===================================================
// header file
// main.h 
#pragma once // 파일 중복 선언을 알려주는 역할

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>

using namespace std;

void h_swap(int a, int b) {                                                // 하드코딩 방법으로는 h_swap 이후 x, y 값의 변경이 없다.
	int temp;                                                                // h_swap의 작동시의 a, b의 값은 다른 주소에 저장이 된다.

	cout << "x의 값 :" << a << "\t" << "y의 값 :" << b << endl;               
	temp = b;
	b = a;
	a = temp;

	cout << "변경된 x의 값 :" << a << "\t" << "변경된 y의 값 :" << b << endl;
}

void p_swap(int *a, int *b) {                                               // 포인터를 이용한 방법으로는 p_swap 이후 x, y 값의 변경이 있다.
	int temp;                                                                 // a, b의 값이 x, y의 주소 값을 사용한다. 그렇기에 p_swap을 사용 시 
                                                                            // x, y 주소 값의 저장된 값을 변경하여 나오기 때문에 x, y의 값이 변경되어 나온다.
	cout << "이전 x 주소 : " << a << "\t" << "이전 x 값 : " << *a << endl;
	cout << "이전 y 주소 : " << b << "\t" << "이전 y 값 : " << *b << endl;

	temp = *a;
	*a = *b; 
	*b = temp;

	cout << "변경 x 주소 : " << a << "\t" << "변경 x 값 : " << *a << endl;
	cout << "변경 y 주소 : " << b << "\t" << "변경 y 값 : " << *b << endl;
	

}
